#define SCREENWIDTH  320
#define SCREENHEIGHT 256
#define BLOCKHEIGHT 16
#define EXTRAHEIGHT 32
#define SCREENBYTESPERROW (SCREENWIDTH / 8)

#define BITMAPWIDTH SCREENWIDTH
#define BITMAPBYTESPERROW (BITMAPWIDTH / 8)
#define BITMAPHEIGHT ((SCREENHEIGHT + EXTRAHEIGHT) * 2)
#define HALFBITMAPHEIGHT (BITMAPHEIGHT / 2)

#define BLOCKSWIDTH 320
#define BLOCKSHEIGHT 256
#define BLOCKSDEPTH 4
#define BLOCKSCOLORS (1L << BLOCKSDEPTH)
#define BLOCKWIDTH 16
#define BLOCKHEIGHT 16
#define BLOCKSBYTESPERROW (BLOCKSWIDTH / 8)
#define BLOCKSPERROW (BLOCKSWIDTH / BLOCKWIDTH)

#define NUMSTEPS BLOCKHEIGHT

#define BITMAPBLOCKSPERROW (BITMAPWIDTH / BLOCKWIDTH)
#define BITMAPBLOCKSPERCOL (BITMAPHEIGHT / BLOCKHEIGHT)
#define HALFBITMAPBLOCKSPERCOL (BITMAPBLOCKSPERCOL / 2)

#define VISIBLEBLOCKSX (SCREENWIDTH / BLOCKWIDTH)
#define VISIBLEBLOCKSY (SCREENHEIGHT / BLOCKHEIGHT)

#define BITMAPPLANELINES (BITMAPHEIGHT * BLOCKSDEPTH)
#define BLOCKPLANELINES  (BLOCKHEIGHT * BLOCKSDEPTH)
 
#define PALSIZE (BLOCKSCOLORS * 2)
#define BLOCKSFILESIZE (BLOCKSWIDTH * BLOCKSHEIGHT * BLOCKSPLANES / 8 )

#define TWOBLOCKS (BITMAPBLOCKSPERROW - NUMSTEPS)
#define TWOBLOCKSTEP (NUMSTEPS - TWOBLOCKS)

#define ROUND2BLOCKWIDTH(x)  ((x) & ~(BLOCKWIDTH - 1))
#define ROUND2BLOCKHEIGHT(x) ((x) & ~(BLOCKHEIGHT - 1))
 

enum GameState
{
	TITLE_SCREEN = 0,
	ROLLING_DEMO = 1,
    GAME_START = 2,
    GAME_OVER = 3,
    HIGH_SCORE = 4
};

enum GameStages
{
    STAGE_LASANGELES = 0,
    STAGE_LASVEGAS = 1,
    STAGE_HOUSTON = 2,
    STAGE_STLOUIS = 3,
    STAGE_CHICAGO = 4,
    STAGE_NEWYORK = 5
};

enum GameDifficulty
{
    FIVEHUNDEDCC = 0,
    SEVENFIFTYCC = 1,
    TWELVEHUNDREDCC = 2
};

extern UBYTE game_stage;
extern UBYTE game_state;
extern UBYTE game_difficulty;

extern WORD mapposy,videoposy;
extern LONG	mapwidth,mapheight;

extern UBYTE *frontbuffer,*blocksbuffer;
extern UWORD *mapdata;

extern ULONG game_score;

void InitializeGame();
void NewGame(UBYTE difficulty);
void GameLoop();
void SetBackGroundColor(UWORD color);
void FillScreen();
void CheckJoyScroll();